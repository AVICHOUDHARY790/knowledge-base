---
layout: post
title: "Sailabove command line reference"
categories: docker/documentation
tags: sailabove, reference
lang: en
author: yadutaf
---

[Sailabove][7] is the scalable, HA Cloud Docker Hosting platform by Runabove. It comes with out of the box load balancing, HA persistent volumes and seemless private networks.

This documentation is about Sailabove command line admin interface. To get started, [Create your account][7] and see our [Getting Started guide][8] first.

To get a list of available commands, run ``sail`` or ``sail --help`` for more detailed information.

```
$ sail
usage: sail [-h] [-H API_HOST] [-u API_USER] [-p API_PASSWORD] [--debug]
            {me,apps,services,containers,compose,repositories,networks} ...
sail: error: too few arguments
```

# Help

```
$ sail --help
usage: sail [-h] [-H API_HOST] [-u API_USER] [-p API_PASSWORD] [--debug]
            {me,apps,services,containers,compose,repositories,networks} ...

OVH Docker as a Service CLI

positional arguments:
  {me,apps,services,containers,compose,repositories,networks}
    me                  Account
    apps                Applications
    services            Services
    containers          Containers
    compose             Docker compose
    repositories        Repositories
    networks            Networks

optional arguments:
  -h, --help            show this help message and exit
  -H API_HOST, --api-host API_HOST
                        Docker index host [env: SAIL_HOST] or [sailabove.io]
  -u API_USER, --api-user API_USER
                        Docker index user [env: SAIL_USER] or [file: .dockercfg]
  -p API_PASSWORD, --api-password API_PASSWORD
                        Docker index password [env: SAIL_PASSWORD] or [file: .dockercfg]
  --debug               Debug the API requests
```

# Authentication

``sail`` supports 3 authentication mechanisms. ``~/.dockercfg`` configuration file created by ``docker``, explicit command line parameters and environment variables. Each individual authentication parameter (endpoint, username, password) is looked up in the following order: explicit configuration then environment variable then ``~/.dockercfg`` then internal defaults.

Internally, ``sail`` supports the same authentication mechanisms as the Docker Hub, currently basic-auth. Hence the user/password scheme.

##  <a name="auth-dockercfg"></a> Using ``~/.dockercfg``

``~/.dockercfg`` is a json file automatically generated by the ``docker`` client when connecting to an image repository like the docker hub or Sailabove's private registry. When this file is present, ``sail`` will automatically use it.

To create this file:
```
$ docker login sailabove.io
Username: exampleuser
Password:
Email: optional@example.com
Login Succeeded
```

##  <a name="auth-cmdline"></a> Using command line options

Each ``sail`` subcommand accepts ``--api-user`` and ``--api-password`` parameters. For instance, to get a specific user's information:

```
sail --api-user 'exampleuser' --api-password 'Ex4mple Passw0rd' me show
[WARNING] Failed to read ~/.dockercfg
allowed_source_addresses: []
email: optional@example.com
name: exampleuser
```

``sail``  cli also supports ``--api-host`` parameter. It is currently not used and defaults to ``sailabove.io``.

> **Note:** If ``~/.dockercfg`` does not exist, a warning is displayed.

> **Warning:** Specifying passwords on the command line is *not* recommended. They can easily be recovered from history. [See "Using environment variables" section below](#auth-environ).

##  <a name="auth-environ"></a> Using environment variables

When any of the above command line switches is not provided ``sail`` will look for their respective environment variable equivalent. Namely:

- ``SAIL_USER`` for API user configuration
- ``SAIL_PASSWORD`` for API password configuration
- ``SAIL_HOST`` for API endpoint configuration

# me

Get Sailabove account information and manage IP based access restrictions.

```
usage: sail me [-h] {show,set-acls} ...

positional arguments:
  {show,set-acls}
    show           show acount details
    set-acls       Set ip based account access restrictions

optional arguments:
  -h, --help       show this help message and exit
```

## show

Displays current account email address, user name and access restrictions. For more information regarding access restrictions, [please see "set-acls" section below](#account-acls).

### Example
```
 Without access lists
$ sail me show
allowed_source_addresses: []
email: email@example.com
name: exampleuser

 With access list enables
$ sail me show
allowed_source_addresses:
  - 1.2.3.0/24
  - 4.5.6.7/32
email: email@example.com
name: exampleuser
```

## <a name="account-acls"></a> set-acls

ACLs litterally are Access Controll List. ``set-acls`` can be used to restrict the set of source CIDR notation IPs allowed to login using a specific account. Once installed, only whitelisted source IPs will be able to manage the account and images.

> **Note:** To prevent any miss-configuration, the Sailabove will cowardly refuse to install a rule that would block the calling source address.

There is currently no way to remove ACLs using the API/CLI once installed. As a workaround, one can simply whitelist ``0.0.0.0/0`` which effectively allows any source address.

```
usage: sail me set-acls [-h] acl

positional arguments:
  acl         "1.2.3.4/24,4.5.6.7/32" form

optional arguments:
  -h, --help  show this help message and exit
```

### Example
```
sail me set-acls '1.2.3.0/24,4.5.6.7/32'
allowed_source_addresses:
  - 1.2.3.0/24
  - 4.5.6.7/32
email: email@example.com
name: exampleuser
```

# services

Manage Sailabove services. A service is a set of container started from the same Docker image. A given image can be used to create several services. Services can be started, stopped and scaled up and down on the fly. The "Service" concept is central to Sailabove. This is probably the single most used command family.

## ps

Lists all services you have access to along with their current state and information.

```
usage: sail services ps [-h] [-n NAMESPACE]

optional arguments:
  -h, --help            show this help message and exit
  -n NAMESPACE, --namespace NAMESPACE
```

### Example
```
$ sail services ps
NAME               REPOSITORY                IMAGE ID      STATE         CONTAINERS  CREATED                     NETWORK
demo/hello-python  demo/hello-python@latest  d267cca5bde3  Running                1  2014-11-25 16:17:14.293487  public:92.222.71.184
demo/hello-1click  demo/hello-go@latest      a5271b9c46f8  Running                1  2015-01-07 15:36:53.792790  predictor:172.16.0.31
demo/hello-node    demo/hello-node@latest    041080e59d02  Running                1  2014-11-25 16:13:22.456765  public:92.222.75.1, demo/private:192.168.0.50
demo/hello-ruby    demo/hello-ruby@latest    15288e3cbb83  Running                1  2014-11-25 16:22:12.396425  public:92.222.78.126
demo/hello-go      demo/hello-go@latest      f01a3faf0b4a  Running                1  2015-03-13 13:11:42.573925  predictor:172.21.102.183
demo/redis         demo/redis@latest         868be653dea3  Running                1  2015-03-10 14:38:18.105262  demo/private:192.168.0.24
demo/www           demo/www@latest           fa54d52952de  Running                1  2015-03-10 14:31:39.940858  demo/private:192.168.0.47, predictor:172.17.69.241
```

### Fields definitions

- **``Name``**: Service name of the form ``<application name>/<service name>``. [Please see ``Applications`` section for more information](#applications).
- **``Repository``**: Source Docker image for this service of the form ``<username>/<image name>``. [Please see ``Applications`` section for more information](#applications).
- **``Image Id``**: Docker image id corresponding to ``Repository``
- **``State``**: Service state. [See ``List of possible states`` below for a detailed list](#service-states).
- **``Containers``**: Number of containers in this service. [See ``scale`` section below for more information](#service-scale).
- **``Created``**: UTC time of service creation
- **``Network``**: Comma separated list of networks this service is connected to of the form ``[<owner>/]<network name>:<ip>``. If a service has multiple containers, insert 1 entry per container.

### <a name="service-states"></a> States definition

- **``BUILDING``**: When building services base image template from the repository.
- **``SCHEDULING``**: When the service is launching on the actual machines.
- **``STARTING``**: When the service is starting.
- **``RUNNING``**: When the service is fully operational.
- **``STOPPING``**: When the service is stopping.
- **``STOPPED``**: When the service has no running container.
- **``DELETING``**: When the service is being removed.
- **``DELETED``**: When the service has been fully deleted. This is a transient state.
- **``DEGRADED``**: When at least one of the service's container is running but not the nominal container count
- **``TERMINATED``**:  When all containers are in ``TERMINATED`` state. Otherwise, see ``DEGRADED``.
- **``CRASHED``**: When all containers are in ``CRASHED`` state. Otherwise, see ``DEGRADED``.
- **``STARVED``**: When all containers are in ``STARVED`` state. Otherwise, see ``DEGRADED``.

## <a name="service-add"></a> add

Create and start a new ``Service`` from a ``Repository``. A repository is basically a docker image pushed or registered on Sailabove. [See ``Repositories`` for more information](#repositories). Most of the options default can be determined automatically from Docker image meta data and can be omitted.

Once the containers are started, ``sail`` will automatically attach and stream the console stdout/stderr in the terminal. When using ``sail`` from a script, it may be a good idea to add ``--batch`` parameter to disable this behavior. [See ``attach`` below for more information](#service-attach).

```
usage: sail services add [-h] [--model MODEL] [--number NUMBER] [--user USER]
                         [--entrypoint ENTRYPOINT] [--command COMMAND]
                         [--workdir WORKDIR] [--restart RESTART] [-e ENV]
                         [--link LINK] [-p PUBLISH] [--network NETWORK]
                         [--network-allow NETWORK_ALLOW] [--gateway GATEWAY]
                         [--volume VOLUME] [--batch]
                         repository service

positional arguments:
  repository            [namespace/]repository:tag
  service               the new service name

optional arguments:
  -h, --help            show this help message and exit
  --model MODEL         the containers model. Currently only 'xs'
  --number NUMBER       number of containers to launch
  --user USER           override docker user
  --entrypoint ENTRYPOINT
                        override docker entrypoint
  --command COMMAND     override docker run command
  --workdir WORKDIR     override docker workdir
  --restart RESTART     Docker like restart policy (no, always[:max], on-failure[:max])
  -e ENV, --env ENV     override docker environment
  --link LINK           link to another service
  -p PUBLISH, --publish PUBLISH
                        publish ports: network:publishedPort:containerPort,
                        network::containerPort, publishedPort:containerPort,
                        containerPort
  --network NETWORK     Specify service network {public|private|<namespace
                        name>/<network-name>}. "public" assigns a public IP,
                        "private" selects this namespace's private network
                        (default: [public, private])
  --network-allow NETWORK_ALLOW
                        Use IPs whitelist for network
                        [network:]ip[/mask][:port]
  --gateway GATEWAY     Use service as gateway for a network. e.g.
                        "private:public", will use the service as a gateway
                        for the "private" network to the "public" network.
  --volume VOLUME       Add a persistent volume and mount it, e.g. "/data:42"
                        will create a 42GB persistent volume and mount it in
                        the /data directory. This directory must exist in the
                        Docker image or be a VOLUME.
  --batch               do not attach console on start
```

Sailabove will automatically create a 10GB persistent volume for each ``VOLUME`` metadata specified in the Docker image. You can use the ``--volume`` argument to register additional volumes and override the default volume size. Technically, volumes are based on distributed HA block storage replicated 3 times. For example, to create a 50GB volume on ``/mnt``, you can use a parameter like ``--volume /mnt:50``. This option can be specified multiple times.

To handle the load, services can be composed of multiple instances of the same image transparently distributed on multiple Hosts. To specify the initial number of instances (containers) to create for this service, use ``--number``. For instance, to initially create 3 instances, you can use a parameter like ``--number 3``

Because of this distributed design, Docker ``--volume-from`` or similar behavior is not supported.

Containers running environment can be tuned by

- running a specific Docker ``ENTRYPOINT`` instead of default ``CMD`` with ``--entrypoint <name>``
- overriding startup ``CMD`` with ``--command "/usr/bin/command arg1, ..."``
- overriding the UNIX user or uid running the command with ``--user <unix user name|uid>``
- overriding Docker's ``WORKDIR`` and UNIX ``$PWD`` environment variable with ``--workdir </absolute/path>``
- inserting or overriding environment variables with ``--env VAR=value``. This option can be specified multiple times.

When any of the service container exists, it may be automatically restarted depending on its exit status and a restart policy. The default is to keep the container stopped and mark it as ``TERMINATED``. To specify a policy, use an argument of the form ``--restart <policy>[:<max restart>]``. Valid policies include ``no``, ``always`` and ``on-failure``, the later basically means: whenever the exit status is not ``0``. Optionally the maximum number of times a container can be automatically restarted before being reported as ``TERMINATED`` can be specified separated by a colon. For example to automatically restart a container when it fails but at most 5 times, use an argument line ``--restart on-failure:5``. Similarly, to always restart a container regardless its reported exit status, use an argument of the form ``--restart always``.

By default, containers are created with both a public IP and a private IP with all incoming traffic allowed. To override this behavior, you can use a combination of:

- ``--network`` to start on ``public``, ``private``, ``predictor`` (HTTP(s) load balancer), a custom private network. May be specified multiple times to build secured multi-tiered applications.
- ``--publish`` to expose specific services on specific ports. This will effectively DROP any incoming traffic on all other ports. The syntax is the same as Docker CLI. May be specified multiple times.
- ``--network-allow`` to restrict the set of IPs allowed to connect to a service. Of the form ``[network:]ip[/mask][:port]``.May be specified multiple times.
- ``--gateway`` to declare a container as gateway from a network to another. Of the form ``source/private net:destination/public network``. This is especially useful when building secured multi-tiered applications.

To link multiple Docker services together, use ``--link <source service>[:<alias>]``. For example, to link a frontal container to a MySQL server powered by MariaDB, use an argument of the form ``--link username/mariadb:mysql``. Links will automatically use the most secured and isolated common network available. generally, the application's default private network.

For more information regarding networks, please see below.

### Example

Create a Ghost service on a public IP:
```
$ sail services add library/ghost -p 80:2368 ghost
```

To take advantage of the predictor load balancer instead:
```
$ sail services add library/ghost --network predictor -p 2368:2368 ghost
```

Or to boot WordPress as a muti-tiered application (persistent volumes automatically added):
```
 Start MySQL on a private network, No internet access.
$ sail services add --network private -e MYSQL_ROOT_PASSWORD=mysecretpassword library/mysql <user name>/wordpress-mysql
```
```
 Start Wordpress with the predictor load balancer
$ sail services add -p 80:80 --link wordpress-mysql:mysql --network predictor --network private library/wordpress <user name>/wordpress
```

## rm

Stop and delete service, all its containers and all its volumes. This can not be undone. To upgrade a service while keeping the data, see ``redeploy`` below.

```
usage: sail services rm [-h] service

positional arguments:
  service     [application/]service name

optional arguments:
  -h, --help  show this help message and exit
```

> **Note:** This call is asynchronous. You won't be able to create a service with the same name until the old one has been fully removed.

## <a name="service-attach"></a> attach

Attach to service's ``stdout`` and ``stderr``. This will effectively stream all the containers console output in real time. To exit, press ``Ctrl+C``. Each output line is prefixed with ``<service-name>-<seq id>:`` like in ``docker-compose``.

```
usage: sail services attach [-h] service

positional arguments:
  service     [namespace/]service name

optional arguments:
  -h, --help  show this help message and exit
```

### Example

````
$ sail services attach demo/hello-python

hello-python-1:5.196.2.30 - - [2015-04-24 16:31:11] "GET /hello/world HTTP/1.1" 200 135 0.000309
hello-python-1:5.196.2.30 - - [2015-04-24 16:31:12] "GET /favicon.ico HTTP/1.1" 404 886 0.000407
hello-python-1:5.196.2.30 - - [2015-04-24 16:31:12] "GET /favicon.ico HTTP/1.1" 404 886 0.000384

^C
```

## inspect

Get detailed services and service's container status. It includes low level networking and image information. This call is mostly intended for debugging.

```
usage: sail services inspect [-h] service

positional arguments:
  service     [namespace/]service name

optional arguments:
  -h, --help  show this help message and exit
```

### Example

```
$ sail services inspect demo/hello-python
attached_domains: []
container_command:
container_entrypoint:
container_environment: []
container_model: x1
container_network:
  demo/public: true
container_number: 1
container_ports:
container_user:
container_workdir:
containers:
  hello-python-1:
    network:
      public:
        ip: 92.222.71.184
creation_date: 2014-11-25T16:17:14.293487
deployment_date: 2015-01-12T10:37:19.678810
description:
image: d267cca5bde38c0f0f87d752c27673828919d4ea74c7f5db535ab521a41fb836
linked_from_service: {}
linked_to_service: {}
name: hello-python
repository: demo/hello-python
repository_tag: latest
restart_policy: no
state: running
```

## stop

Stop all service's containers. Prints on the console the output of ``sail services inspect`` for this service reflecting the new service state.

```
usage: sail services stop [-h] service

positional arguments:
  service     [namespace/]service name

optional arguments:
  -h, --help  show this help message and exit
```

### Example

```
$ sail services stop demo/redis
[...] # `sail services inspect demo/redis` output
```

## start

Start all service's containers. Prints on the console the output of ``sail services inspect`` for this service reflecting the new service state.

```
usage: sail services start [-h] service

positional arguments:
  service     [namespace/]service name

optional arguments:
  -h, --help  show this help message and exit
```

### Example

```
$ sail services start demo/redis
```

## <a name="service-scale"></a> scale

Increase or decrease the pool of containers in the service. Uses includes load balancing and high availability. Automatocally attaches to the console of the containers unless in ``--batch`` mode.

```
usage: sail services scale [-h] [--number NUMBER] [--batch] service

positional arguments:
  service          [namespace/]service name

optional arguments:
  -h, --help       show this help message and exit
  --number NUMBER  scale to `number` of containers
  --batch          do not attach console on start
```

## redeploy

Perform a rolling re-deploy of all service's container with a new image, network, environment, ... This method has primarily been created to deploy a new version of a Docker image from the repository. It will automatically rollback if boot fails for any reason.

This method's arguments are [the same as ``sail services add``](#service-add).

```
usage: sail services redeploy [-h] [--model MODEL] [--user USER]
                              [--entrypoint ENTRYPOINT] [--command COMMAND]
                              [--workdir WORKDIR] [--restart RESTART] [-e ENV]
                              [--link LINK] [-p PUBLISH] [--network NETWORK]
                              [--network-allow NETWORK_ALLOW]
                              [--gateway GATEWAY] [--batch]
                              service

positional arguments:
  service               [namespace/]service name

optional arguments:
  -h, --help            show this help message and exit
  --model MODEL         the containers model
  --user USER           override docker user
  --entrypoint ENTRYPOINT
                        override docker entrypoint
  --command COMMAND     override docker run command
  --workdir WORKDIR     override docker workdir
  --restart RESTART     Docker like restart policy (no, always[:max], on-
                        failure[:max])
  -e ENV, --env ENV     override docker environment
  --link LINK           link to another service
  -p PUBLISH, --publish PUBLISH
                        publish ports: network:publishedPort:containerPort,
                        network::containerPort, publishedPort:containerPort,
                        containerPort
  --network NETWORK     Specify service network {public|private|<namespace
                        name>}. "public" assigns a public IP, "private"
                        selects this namespace's private network (default:
                        [public, private])
  --network-allow NETWORK_ALLOW
                        Use IPs whitelist fo network
                        [network:]ip[/mask][:port]
  --gateway GATEWAY     Use service as gateway for a network. e.g.
                        "private:public", will use the service as a gateway
                        for the "private" network to the "public" network.
  --batch               do not attach console on start
```

When altering the environment variables, make sure to explicitely specify the full list of environment variables, including existing ones. Missing variables will be removed.

Links and published ports follow the same mechanism.

### Example

```
 Expose SSH port on service exposing FTP port
sail services redeploy remote-access-service -p 21 -p 22

 Disable FTP port
sail services redeploy remote-access-service -p 22
```

> **Warning:** Network and links related options are experimental and may lead to unexpected side effects. Nonetheless, they have been designed to address specific real-world problems. If you meet any of this issues, please, feel free to [contact us][1].

## domain-attach

Register a domain on the predictor load balancer for the service. The service *must* have been started with ``--network predictor``. Once registered on the predictor, any traffic received on the predictor targeting this domain will be directed to this service.

```
usage: sail services domain-attach [-h] service domain

positional arguments:
  service     [namespace/]service name
  domain

optional arguments:
  -h, --help  show this help message and exit
```

### Example

```
$ sail services domain-attach demo/hello-go www.hello-go.com
domain: www.hello-go.com
```

## domain-detach

Detach a domain previously registered on the predictor load balancer.

```
usage: sail services domain-detach [-h] service domain

positional arguments:
  service     [namespace/]service name
  domain

optional arguments:
  -h, --help  show this help message and exit
```

### Example

```
$ sail services domain-detach demo/hello-go www.hello-go.com
true
...
```

# containers

Directly manage service's underlying containers. This is a low level command mostly intended for specific debugging. All operations on containers must be done through ``sail services``.

## ps

Print a list of existing containers along with their current state.

```
usage: sail containers ps [-h] [-n NAMESPACE]

optional arguments:
  -h, --help            show this help message and exit
  -n NAMESPACE, --namespace NAMESPACE
                        the namespace name
```

### Fields definitions

- **``Name``**: Container name of the form ``<application name>/<container internal name>``.
- **``Repository``**: Source Docker image for this container of the form ``<username>/<image name>``.
- **``Image Id``**: Docker image id corresponding to ``Repository``.
- **``State``**: Container state. [See ``List of possible states`` below](#container-state).
- **``Deployed``**: UTC time of container creation.

### <a name="container-states"></a> States definition

- **``STARTING``**: When the container is starting.
- **``RUNNING``**: When the container is fully up.
- **``STOPPING``**: When the container is stopping.
- **``STOPPED``**: When the container is stopped.
- **``DELETING``**: When the container is being deleted.
- **``DELETED``**: When the container has been fully deleted. This is a transient state.
- **``TERMINATED``**:  When the container exited.
- **``CRASHED``**: When the container failed to start for internal reasons.
- **``STARVED``**: When the container could not be scheduled.

### Example
```
$ sail containers ps
NAME                                          REPOSITORY                IMAGE ID      STATE       DEPLOYED
demo/165db267-0a99-4724-832c-eaa8853a4d0f     demo/hello-go@latest      a5271b9c46f8  Running     2015-01-13 18:32:38.683153
demo/c60ecff0-53ec-4267-9891-5ee7f845a6d2     demo/hello-node@latest    041080e59d02  Running     2015-04-24 13:25:43.671898
demo/50eebcbb-a90b-44b5-b1ad-dfe33b865939     demo/hello-python@latest  d267cca5bde3  Running     2015-01-12 10:37:19.678810
demo/926e171c-a5a8-4754-b98c-704d19de65cc     demo/hello-ruby@latest    15288e3cbb83  Running     2015-01-20 10:28:16.558364
demo/a62602b6-83ca-445c-8679-9bf6c92f1c90     demo/www@latest           fa54d52952de  Running     2015-03-10 14:44:32.594185
demo/a81fffaf-5f53-4257-ae36-5faa89647078     demo/hello-go@latest      f01a3faf0b4a  Running     2015-03-13 13:11:57.104247
```

## inspect

Get detailed container's status. It includes low level networking and image information.

```
usage: sail containers inspect [-h] container

positional arguments:
  container   [namespace/]container name

optional arguments:
  -h, --help  show this help message and exit

```

### Example

```
$ sail containers inspect demo/a81fffaf-5f53-4257-ae36-5faa89647078
command:
  - /go/bin/app
creation_date: 2015-03-13T13:11:48.443473
deployment_date: 2015-03-13T13:11:57.104247
environment:
  - PATH=/go/bin:/usr/src/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  - GOLANG_VERSION=1.3.3
  - GOPATH=/go
hostname: hello-go-1
image: f01a3faf0b4afd52821f3c6672547d5a50157a6923119d3ce5bd3a60a102f3bc
name: a81fffaf-5f53-4257-ae36-5faa89647078
network:
  predictor:
    ip: 172.21.102.183
repository: demo/hello-go
repository_tag: latest
restart_policy:
state: running
user: root
workdir: /go/src/app
```

## attach

Attach to container's stdout/stderr and stream it to the console in real time. Press Ctrl+C to exit.

```
usage: sail containers attach [-h] container

positional arguments:
  container   [namespace/]container name

optional arguments:
  -h, --help  show this help message and exit
```

### Example

```
sail containers attach demo/c60ecff0-53ec-4267-9891-5ee7f845a6d2
5.196.2.30 - - [24/Apr/2015:18:27:12 +0000] "GET /hello/world HTTP/1.1" 304 - "-" "Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Firefox/31.0"

^C
```

# <a name="applications"></a> apps

Applications are projects. They are logical groups of services and Docker image repositories. Typical usage involves creating applications for different customers. You may sometime find references to "namespaces". This is how we refere to applications internally. This is the same concept. Application can currently only be inspected from the API/CLI. If you need additional applications or specific access policies, feel free to [contact us][2].

By default, each Sailabove account is created with an application with the same name and Read-Only access to the ``library`` application. Among others, this application contains all the images used to build the 1-click apps.

## list

List all applications attached to this account

```
usage: sail apps list [-h]

optional arguments:
  -h, --help  show this help message and exit
```

### Example

```
$ sail apps list
- exampleuser
- library
```

## inspect

Get detailed information regarding a specific application. It includes current offer, quota, and attached private networks.

```
usage: sail apps inspect [-h] app

positional arguments:
  app         application

optional arguments:
  -h, --help  show this help message and exit
```

### Example

```
$ sail apps inspect exampleuser
allowed_networks:
  - public
  - predictor
creation_date: 2014-09-01T07:43:24.396496
default_networks:
  - public
  - exampleuser/private
max_attached_domains: 10
max_containers: 5
max_network_ranges: 1
max_networks: 1
max_repositories: 5
max_volumes_size: 10
name: exampleuser
offer: free
```

# compose

Compose is a Docker component to manage real world applications composed of multiple building blocks in a central place, with a single command line. ``sail compose`` provides the same features as [``docker-compose``][3]. It will compose and up a full application from a single ``docker-compose.yml`` manifest.

Compose can also build the manifest automatically from a manually started application. This will, for example, help to duplicate a development environment on the production or staging environment. Each ``sail services add`` argument ([see ``sail services add`` above](#service-add)), is exported in the manifest.

For more information on ``docker-compose``, please visit its official website: https://docs.docker.com/compose/

## up

Build and launch a full application stack from a ``docker-compose.yml`` manifest

```
usage: sail compose up [-h] [-f FILE] [-p PROJECT_NAME] application

positional arguments:
  application           The application where to apply the docker compose / fig

optional arguments:
  -h, --help            show this help message and exit
  -f FILE, --file FILE  Specify an alternate compose file (default: docker-compose.yml)
  -p PROJECT_NAME, --project-name PROJECT_NAME
                        Specify an alternate project name (default: directory name)
```

## get

Export an existing full application as a ``docker-compose.yml`` manifest. As some features like private networks are not yet supported by mainline docker, use ``--standard`` argument to produce a ``docker-compose`` compatible output if you're planning on launching the application locally.

```
usage: sail compose get [-h] [--standard] application

positional arguments:
  application The application to export as compose file

optional arguments:
  -h, --help  show this help message and exit
  --standard  Return only Docker Compose standard properties
```

### Example

```
$ sail compose get demo
redis:
  image: sailabove.io/demo/redis
  net:
    private: true
  ports: []
www:
  image: sailabove.io/demo/www
  links:
  - redis:redis
  net:
    predictor: true
    private: true
  ports:
  - 80:8080

$ sail compose get demo --standard
redis:
  image: sailabove.io/demo/redis
  ports: []
www:
  image: sailabove.io/demo/www
  links:
  - redis:redis
  ports:
  - 80:8080
```

# <a name="repositories"></a> repositories

Just like Git or VCS repositories hold an application code, Docker repositories hold the containers' template. The typical Sailabove workflow involves:

 1. Tag a Docker image with ``docker tag sailabove.io/<user or app name>/<repo name>[:<tag name>]``
 2. Push the previously tagged Docker image with ``docker push <previous tag>``
 3. Launch it with ``sail services add <user or app name>/<repo name>[:<tag name>] <user or app name>/<service name>``

## list

Get a list of all repositories currently hosted or referenced by Sailabove.

```
usage: sail repositories list [-h] [-n NAMESPACE]

optional arguments:
  -h, --help            show this help message and exit
  -n NAMESPACE, --namespace NAMESPACE
                        the namespace or application name
```

### Example

```
$ sail repositories list -n demo
NAME               TYPE      PRIVACY    SOURCE
demo/hello-python  hosted    public     -
demo/hello-node    hosted    public     -
demo/hello-ruby    hosted    private    -
demo/hello-go      hosted    private    -
demo/www           hosted    private    -
demo/redis         external  private    https://registry.hub.docker.com/redis
```

In this example, the redis image used by one of the demo actually resides in the Docker hub official images pool. This avoids manually syncing already existing images.

### Fields definitions

- **``Name``**: Repository name of the form ``<application name>/<image name>``.
- **``Type``**: ``hosted`` for private repositories hosted by Sailabove, ``external`` when refering to an external repository.
- **``Privacy``**: Either ``private`` or ``public``. If the image is public, it will be accessible by anybody.
- **``Source``**: ``external`` image real location.

## add

Register a new repository to an application. This call is mostly useful when registering an external image. it is implicit when using ``docker push`` on a new repository, based on the tag name.

When registering an image for the Docker hub, one can simply visit the target image page and copy/paste its URL as the ``--source``. The API will automatically figure the corresponding registry URL and use it.

```
usage: sail repositories add [-h] [-s SOURCE] type repository

positional arguments:
  type                  The type of repository {hosted,external}
  repository            [application/]repository

optional arguments:
  -h, --help            show this help message and exit
  -s SOURCE, --source SOURCE
                        For external repositories, the source (e.g.
                        registry.hub.docker.com/redis)
```

### Example

```
 Reference the official redis image from its Docker hub page
$ sail repositories add external demo/redis -s https://registry.hub.docker.com/u/library/redis/
name: redis
privacy: private
source: https://registry.hub.docker.com/library/redis
type: external
```

## rm

Fully remove a private repository or a reference to an external repository.

```
usage: sail repositories rm [-h] repository

positional arguments:
  repository  [application/]repository

optional arguments:
  -h, --help  show this help message and exit
```

### Example

```
$ sail repositories rm demo/redis2
true
...
```

# networks

Sailabove services can be linked using private networks. Private networks are real L2 private networks. Only the selected services will exist on this network. Each private network can have a custom IPv4 subnet as well as custom allocation ranges within this subnet. Whenever 2 containers / services are linked together, Sailabove will automatically try to make them communicate using a common private network.

By default, every application is created with a private network named ``<application name>/private`` with the ``192.168.0.0/16`` subnet and automatic allocation for IPs between ``192.168.0.10`` and ``192.168.0.254``. In practice, this means that this network can host more than 200 containers with the default allocation range.

This is an advanced feature designed for multi-tiered applications with specific component isolation requirements.

## list

List all private networks associated with current account.

```
usage: sail networks list [-h] [-n NAMESPACE]

optional arguments:
  -h, --help            show this help message and exit
  -n NAMESPACE, --namespace NAMESPACE
                        restrict to application's networks
```

### Example

```
$ sail networks list -n exampleuser
NAME                 SUBNET
exampleuser/private  192.168.0.0/16
```

### Fields definitions

- **``Name``**: Network name of the form ``<application name>/<network name>``.
- **``Subnet``**: IPv4 subnet in CIDR notation.

## add

Create a new private network for an application with a given subnet. Once created, the next step is to register IPv4 allocation ranges. Subnets size must fit between ``/16`` and ``/28``. This respectively corresponds to networks with up to 65534 and 14 IPs. A private network has exactly one subnet. This subnet can not be changed.

Even though this is not enforced, subnets should be allocated within the [Private IPv4 address spaces][4]. Additionally, if you are planning to connect a service to multiple private networks, make sure to allocate non-overlapping subnets. A good practice is to allocate all private networks on fully disjoint subnets of reasonable size. e.g. the ``10.0.0.0/16`` address space could be sub-divided into ``/24`` subnets.

The default ``private`` network uses ``192.168.0.0/16`` subnet and the ``predictor`` network uses the ``172.16.0.0/12`` subnet.

```
usage: sail networks add [-h] network subnet

positional arguments:
  network     [application/]network
  subnet      Network subnet

optional arguments:
  -h, --help  show this help message and exit
```

### Example

```
 Create a private network dedicated to a famous RDBMS replication
$ sail networks add mariadb-replication 10.1.0.0/24
name: exampleuser/mariadb-replication
subnet: 10.1.0.0/24
```

## range-add

Register an IPv4 range for automatic container IP allocation. The first 10 IPs of a subnet are reserved for internal use, the last IP is reserved for broadcast. A range can start and end to any IP as long as these conditions are met. Allocation ranges can not be removed.

```
usage: sail networks range-add [-h] network ip_from ip_to

positional arguments:
  network     [application/]network
  ip_from     Starting IP
  ip_to       End IP

optional arguments:
  -h, --help  show this help message and exit
```

### Example

```
 Register all possible IPs from subnet in the allocation range
$ sail networks range-add yadutaf/mariadb-replication 10.1.0.10 10.1.0.254
ip_from: 10.1.0.10
ip_to: 10.1.0.254
```

## inspect

Show private network details including name, subnet and registered allocation ranges.

### Example

```
$ sail networks inspect private
name: exampleuser/private
ranges:
  - 192.168.0.10-192.168.0.254
subnet: 192.168.0.0/16
```

## rm

Remove a network and all its allocation ranges. All containers and services using it must have been deleted first.

```
usage: sail networks rm [-h] network

positional arguments:
  network     [namespace/]network name

optional arguments:
  -h, --help  show this help message and exit
```

### Example

```
$ sail networks rm exampleuser/mariadb-replication
true
...
```

# Getting help

- Get started: [Getting started quide][8]
- Documentation: [Reference documentation][9], [Guides][10]
- Join OVH Docker mailing list: [docker-subscribe@ml.ovh.net][5]
- Visit our Community: [https://community.runabove.com/][6]
- Drop us an e-mail: [sailabove@ovh.net][1]
- Create your account: [Sailabove.com][7]

  [1]: mailto:sailabove@ovh.net
  [2]: mailto:sailabove@ovh.net
  [3]: https://docs.docker.com/compose/
  [4]: http://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces
  [5]: mailto:docker-subscribe@ml.ovh.net
  [6]: https://community.runabove.com/
  [7]: https://sailabove.com/
  [8]: /kb/en/docker/getting-started-with-sailabove-docker.html
  [9]: /kb/en/docker/documentation
  [10]: /kb/en/docker/
